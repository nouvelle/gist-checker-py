name: Grade Submissions

on:
  workflow_dispatch:
    inputs:
      gists_path:
        description: "Gist URL一覧のファイルパス（シートを使用する場合は入力不要）"
        default: ""
        required: false
      sheet_id:
        description: "Gist URL を読み込む Google スプレッドシートの ID（任意、省略時はシークレットの値を使用）"
        required: false
      sheet_tab:
        description: "読み込むワークシート名（任意、省略時は最初のシートを使用）"
        required: false
      result_tab:
        description: "結果を書き込むワークシート名"
        default: "results"
        required: false
      target_file:
        description: "採点対象のファイル名（assessment-2.py / assessment-3.py）"
        default: "assessment-3.py"
        required: true

jobs:
  grade:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install system packages (fonts)
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto-cjk
          echo "MPLBACKEND=Agg" >> $GITHUB_ENV

      - name: Install Python deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Ensure .out exists (pre-create)
        run: mkdir -p .out

      - name: Run grading
        env:
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
          RESULT_TAB: ${{ github.event.inputs.result_tab }}
        run: |
          SHEET_ID_INPUT="${{ github.event.inputs.sheet_id }}"
          # 入力がなければ Secrets を使用
          SHEET_ID=${SHEET_ID_INPUT:-${{ secrets.GOOGLE_SHEET_ID }}}

          echo "Using SHEET_ID=${SHEET_ID}"
          export GOOGLE_SHEET_ID="${SHEET_ID}"

          python run.py \
            --gists "${{ github.event.inputs.gists_path }}" \
            --sheet-id "${SHEET_ID}" \
            --sheet-tab "${{ github.event.inputs.sheet_tab }}" \
            --out .out --push-to-sheets \
            --target-file "${{ github.event.inputs.target_file }}"

      - name: Debug outputs
        if: always()
        run: |
          echo "PWD=$(pwd)" && ls -la
          echo "\nTree of .out:" && ls -la .out || true
          echo "\nFiles under .out (maxdepth=2):" && find .out -maxdepth 2 -type f -print || true

      - name: Upload artifacts (logs & images)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: grading-artifacts
          path: .out
          include-hidden-files: true
          if-no-files-found: error

      - name: Job summary
        if: always()
        run: |
          echo "### Grading finished" >> $GITHUB_STEP_SUMMARY
          if [ -f .out/results.csv ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Top of results.csv:" >> $GITHUB_STEP_SUMMARY
            head -n 10 .out/results.csv | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f .out/results_wide.csv ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Top of results_wide.csv:" >> $GITHUB_STEP_SUMMARY
            head -n 5 .out/results_wide.csv | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY
          fi
